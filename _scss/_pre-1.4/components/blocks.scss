@import "../includer"; // Special includer that takes care of all my settings

//	BLOCKS
//
//	Blocks make up the format of the main page. There are four main types of blocks: slider,
//	fullscreen, halfscreen, and auto. Auto blocks don't require any special styling.

.block {
	overflow:scroll; // Prevents blocks from messing up their content with fixed heights
	width:100%;
	
	//	BLOCK LAYOUTS
	//	
	//	Both fullscreen and slider blocks use .whole; they take up the entire screen.
	
	&.whole {
		height:100vh;
		
		//	That doesn't work well on smartphone displays, so the height is auto there.
		
		@media screen and ( max-width:649px ) {
			height:auto;
		}
	}
	
	//	Halfscreen blocks use .half; they take up half of the screen's height.
	
	&.half {
		@include prefix( display, flex, value, webkit );
		height:50vh;
		@include prefix( box-sizing, border-box, property, webkit, moz );
		
		//	These blocks are usually so short that their contents are laid out horizontally,
		//	headers first. Additionally, header size is changed to better fit the block
		//	size.
		
		.headers {
			width:50%;
			@include prefix( display, flex, value, webkit );
			@include prefix( flex-direction, column, property, webkit );
			@include prefix( justify-content, center, property, webkit );
			
			h1 {
				font-size:3em;
				margin-bottom:5%;
			}
		}
		.content {
			width:50%;
			@include prefix( display, flex, value, webkit );
			@include prefix( flex-direction, column, property, webkit );
			@include prefix( justify-content, center, property, webkit );
			height:-webkit-fill-available;
			height:-moz-available;
			
			
			.p-c {
				margin:auto 0;
			}
			
			p {
				padding:1% 5%;
			}
		}
		
		//	Once the screen size reaches a certain point, even the horizontal layout doesn't work.
		//	So the height switches to auto there.
		
		@media screen and ( max-height:549px ) {
			height:auto;
		}
		
		//	And the height will also switch to auto on a smartphone display.
		
		@media screen and ( max-width:649px ) {
			height:auto;
			@include prefix( flex-direction, column, property, webkit );
			
			//	Resetting to the default block styles.
			
			.headers {
				width:100%;
				
				h1 {
					font-size:2em;
					margin:0;
				}
			}
			.content {
				width:100%;
				
				p.meta {
					display:none;
				}
			}
		}
	} // end &.half
	
	
	//	GENERAL BLOCK STYLES
	//
	//	General styles that should apply to all blocks
	
	h1 {
		font-size:4em;
		text-align:center;
		padding:2% 1.5% 0;
		
		@media screen and ( max-width:949px ) { // For tablets
			font-size:3em;
		}
		@media screen and ( max-width:649px ) { // For smartphones
			font-size:2em;
		}
	}
	h2 {
		font-size:2em;
		text-align:center;
		padding:0 0.75%;
		
		@media screen and ( max-width:949px ) { // For tablets and smartphones
			font-size:1.5em;
		}
	}
	p {
		padding:1% 10%;
		text-align:center;
	}
	
	//	BLOCK SECTIONS
	//	
	//	Each block has two sections, one for the headers and one for the content.
	//	Normally, the block is laid out vertically, with the headers appearing first.
	//	For shorter screens, however, content is laid out horizontally.
	
	.headers {
		@include prefix( box-sizing, border-box, property, moz );
	}
	.content {
		height:40vh;
		@include prefix( box-sizing, border-box, property, moz );
		
		//	BLOCK COMPONENTS
		//
		//	Images
	
		.imgC {
			text-align:center; // Centers the image
		
			img {
				margin-top:3%;
				height:40vh;
				
				//	For smartphones, set width to fill the screen.
			
				@media screen and ( max-width:649px ) {
					height:auto; // Reset the height so as to avoid stretching the image.
					width:100%;
				}
			}
		
		}
	
		//	Buttons	
		
		.button {
			display:block; // Buttons are actually anchor tags
			padding:2% 0;
			text-align:center;
			width:100%;
			margin:2% auto;
			@include h-font;
			font-size:1.25em;
	
			&:hover {
				text-decoration:none;
			}
	
			//	Embeds are never displayed on smartphones; instead, a button is displayed.
			//	The button is hidden on larger displays.
		
			@media screen and ( min-width:650px ) {
			
				&.button-embed { // The class for a button that is to replace an embed
					display:none;
				}
			}
		}
		
		//	Embeds: really tricky. Some properties won't affect them at all, others do radical things.
		
		.embedC {
			margin-top:2%;
			height:50vh;
		
			iframe {
				height:90%;
				margin:0 auto;
				display:block;
			
				@media screen and ( max-width:649px ) {
					display:none;
				}
			}
			
			//	Embeds look and behave awfully on smartphones, so we replaced them with the
			//	aforementioned buttons.
		
			@media screen and ( max-width:649px ) {
				display:none;
			}
		}
		
		//	Paragraphs
		
		p {
			text-align:justify;
			margin:auto 5%;
		}
		
		@media screen and ( max-width:649px ) {
			height:auto !important;
		}
		
	} // end .content
	
	
	//	MISC STYLES
	//
	//	Blog block paragraphs need a few special styles of their own.
	
	&.block-blog {
		
		p {
			text-align:justify;
			
			&:last-of-type,&.meta {
				text-align:right;
				@include h-font;
			}
		}
	}
	
	//	MEDIA QUERIES
	//
	//	Lays out slides to display horizontally on shorter screens that aren't smartphones.
	
	@media screen and ( max-height:549px ) and ( min-width:650px ) {
		padding:0 2%;
		
		.headers {
			float:left;
			width:45%;
			padding:15vh 0;
			height:100%;
			
			// Prevents iPads from overloading on padding.
			body.ipad & {
				padding:12vh 0;
			}
		}
		.content {
			float:left;
			width:50%;
			padding:15vh 5vw;
			height:80% !important;
			
			// Prevents iPads from overloading on padding.
			body.ipad & {
				padding:10vh 5vw;
			}
			
			//	Stupid embeds.
			.embedC,.imgC {
				width:100%;
				//height:100%;
				
				iframe {
					width:100%;
					
					// Catches iPad from way overdoing it
					body.ipad & {
						height:40%;
					}
				}
			}
		}
	}
	
	//	Smartphone styling to catch anything that other queries missed and to provide some padding.
	
	@media screen and ( max-width:649px ) {
		height:auto !important; // Reset any original styling.
		overflow:hidden; // Reset original styling.
		padding:5% 0;
	}
} // end .block

//	SLIDER
//
//	Most of the slider styles have actually already been taken care of.
//	There are a few things that need to happen in order for the slider blocks to
//	look okay, but 90% of it was taken care of in the .block scope.
//
//	Additionally, pagination links are styled.

#slider {
	position:relative;
	
	//	SLIDER BLOCKS
	//	
	//	Slider blocks need some extra code to make them display properly
	//	around the nav. This also helps them contain their content.
	
	.block {
		padding-top:12vh;
		height:100vh;
		
		.headers,.content {
			@include prefix( box-sizing, border-box, property, moz );
		}
		
		//	Of course, all blocks' height have to be auto at smartphone-width.
		
		@media screen and ( max-width:649px ) {
			height:auto;
			padding:5% 0;
		}
		
		//	Huge issues with displaying on iPads
		body.ipad & {
			padding-top:0;
				
			img {
				width:100%;
				height:auto;
			}
			@media screen and ( max-width:949px ) {
				.headers {
					padding-top:12vh;
				}
			}
		}
	}
	
	//	PAGINATION STYLES
	//
	//	Styles the links to the various slides in the slider. Appears at the bottom
	//	of the slider.
	
	//	Pagination container
	.slidesjs-pagination {
		position:absolute;
		bottom:0;
		padding:2vh 0;
		z-index:100;
		@include prefix( display, flex, value, webkit );
		width:100%;
		@include prefix( justify-content, center, property, webkit );
		
		// Individual pagination container
		.slidesjs-pagination-item {
			margin:0 8px;
			list-style:none;
			
			//	Pagination
			a {
				display:block;
				font-size:0;
				line-height:0;
				border-radius:15px;
				width:25px;
				height:25px;
				background:transparent;
				border:1px solid $colorD1;
				margin:0;
				
				&.active {
					background:$colorD1;
				}
			}
		}
	}
	//	Most slides will have a dark color scheme. But these adjust pagination links for a light scheme.
	&[data-ui-scheme="light"] {
		.slidesjs-pagination-item {
			a {
				border-color:$colorL1;
				
				&.active {
					background:$colorL1;
				}
			}
		}
	}
	
	//	And in case the background is a photo, we add some shadows to help show the pagination.
	&[data-img-background="true"] {
		
		.slidesjs-pagination {
			background:linear-gradient( to top, rgba( 0, 0, 0, 0.8 ), transparent );
		}
	}
	
	//	Removes the Next and Previous buttons that come with the slider.
	.slidesjs-navigation {
		display:none;
	}
}

//	HOMEPAGE HEADER
//	
//	Restyles the header to fit over top of the slider. This give the slider a lot
//	of eye candy and makes background images really pop. Also, redoes #header color settings
//	for displaying well with the slider.

#header {
	background:transparent;
	width:100%;
	position:absolute;
	top:0;
	z-index:200;
	height:12vh;
	
	//	Of course, that doesn't work on smartphones.
	@media screen and ( max-width:649px ) {
		background:#000;
		display:block;
		position:static;
		height:auto;
	}
	
	//	SLIDER SCHEME CHANGES
	//	
	//	Changes color schemes and display based on the current slide's color scheme.
	//	Pretty simple stuff.
	//
	//	TODO
	//		I may choose to redo this in the future with JavaScript because I don't like
	//		how the color changes are delayed.
	
	&[data-ui-scheme="light"] {
		#logo {
			h1 {
				color:$colorL1;
			}
			h2 {
				color:$colorL2;
			}
		}
		#nav {
			a {
				color:$colorL2;
		
				&:hover {
					color:$colorL3;
					background:$colorL1;
				}
			}
			li:hover {
				> a {
					background:$colorL1;
					color:$colorL3;
				}
				.sub-menu {
					background:$colorL3;
				}
			}
		}
		#search-from-nav {
			color:$colorL1;
			
			input {
				background:$colorL3;
				color:$colorL1;
			}
			
			&:hover {
				color:$colorL3;
				background:$colorL1;
			}
		}
	} // end &[data-ui-scheme="light"]
	
	&[data-img-background="true"] {
		background:linear-gradient( to bottom, rgba( 0, 0, 0, 0.8 ), transparent );
		
	}
} // end #header

body {
	background: #000;
}

//	FADE IN STYLES
//
//	If a block is set to fade in (and is not on a smartphone display), it needs some extra styles


@media screen and ( min-width:650px ) {
	
	.block.fade {
		display:none;
	}
}